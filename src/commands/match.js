import { Markup } from 'telegraf';
import { getUserByTelegramId, setUserFree } from '../db/users.js';
import { matchUsers } from '../utils/matching.js';
import { adminMiddleware } from '../middlewares/adminMiddleware.js';
import { log, error } from '../utils/logger.js';

// Store timeout IDs for each user
const userTimeouts = new Map();

export const notifyUsers = async (bot, matches) => {
  try {
    for (const match of matches) {
      // Get user details
      const user1 = await getUserByTelegramId(match.user1_telegram_id);
      const user2 = await getUserByTelegramId(match.user2_telegram_id);
      
      if (!user1 || !user2) {
        error(`Failed to find matched users: ${match.user1_telegram_id}, ${match.user2_telegram_id}`);
        continue;
      }
      
      // Send message to user 1
      try {
        await bot.telegram.sendMessage(
          user1.telegram_id,
          `üéâ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫:\n\n` +
          `üë§ ${user2.full_name}\n` +
          `üíº ${user2.position}\n` +
          `üè¢ ${user2.company}\n` +
          (user2.username ? `üì± @${user2.username}\n\n` : '\n') +
          `–ù–∞–ø–∏—à–∏—Ç–µ –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ!`
        );
        
        // Set timeout for "find new partner" button
        clearTimeout(userTimeouts.get(user1.telegram_id));
        userTimeouts.set(user1.telegram_id, setTimeout(() => {
          bot.telegram.sendMessage(
            user1.telegram_id,
            '–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?',
            Markup.keyboard([['–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞']]).resize()
          );
        }, 15 * 60 * 1000)); // 15 minutes
      } catch (err) {
        error(`Failed to send match notification to user ${user1.telegram_id}`, err);
      }
      
      // Send message to user 2
      try {
        await bot.telegram.sendMessage(
          user2.telegram_id,
          `üéâ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫:\n\n` +
          `üë§ ${user1.full_name}\n` +
          `üíº ${user1.position}\n` +
          `üè¢ ${user1.company}\n` +
          (user1.username ? `üì± @${user1.username}\n\n` : '\n') +
          `–ù–∞–ø–∏—à–∏—Ç–µ –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ!`
        );
        
        // Set timeout for "find new partner" button
        clearTimeout(userTimeouts.get(user2.telegram_id));
        userTimeouts.set(user2.telegram_id, setTimeout(() => {
          bot.telegram.sendMessage(
            user2.telegram_id,
            '–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?',
            Markup.keyboard([['–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞']]).resize()
          );
        }, 15 * 60 * 1000)); // 15 minutes
      } catch (err) {
        error(`Failed to send match notification to user ${user2.telegram_id}`, err);
      }
      
      log(`Matched users: ${user1.full_name} and ${user2.full_name}`);
    }
  } catch (err) {
    error('Error notifying users about matches', err);
  }
};

export const handleFindNewPartner = async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await getUserByTelegramId(userId);
    
    if (!user) {
      return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    }
    
    // Set user as free
    await setUserFree(userId, true);
    
    return ctx.reply('–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–∞–º –ø–æ–¥–±–µ—Ä—É—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞!');
  } catch (err) {
    error('Error finding new partner', err);
    return ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

export const handleAdminMatch = async (ctx) => {
  try {
    ctx.reply('–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä...');
    
    const matches = await matchUsers();
    
    if (matches.length === 0) {
      return ctx.reply('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä.');
    }
    
    await notifyUsers(ctx.telegram, matches);
    
    return ctx.reply(`–£—Å–ø–µ—à–Ω–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${matches.length * 2} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${matches.length} –ø–∞—Ä).`);
  } catch (err) {
    error('Error in admin match command', err);
    return ctx.reply(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–±–æ—Ä–∞: ${err.message}`);
  }
};

export const setupMatchCommand = (bot) => {
  // Admin command to trigger matching manually
  bot.command('match', adminMiddleware, handleAdminMatch);
  
  // User button to find a new partner
  bot.hears('–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', handleFindNewPartner);
}; 